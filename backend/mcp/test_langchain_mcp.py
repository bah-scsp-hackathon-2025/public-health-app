#!/usr/bin/env python3
"""
Test FastMCP Public Health Server using LangChain MCP Adapters

This test demonstrates how the server would be used in a real LangGraph/LangChain application.
"""

import asyncio
import json
import time
from langchain_mcp_adapters.client import MultiServerMCPClient

def parse_tool_result(result):
    """Parse JSON string result from MCP tool"""
    if isinstance(result, str):
        try:
            return json.loads(result)
        except json.JSONDecodeError:
            return {"error": "Invalid JSON response", "raw": result}
    return result

async def test_fastmcp_with_langchain():
    """Test FastMCP server using LangChain MCP client"""
    
    print("FastMCP Public Health Server - LangChain MCP Adapter Test")
    print("=" * 70)
    print()
    
    # Configure the MCP client with SSE transport
    mcp_host = "localhost"
    mcp_port = 8000
    
    client_config = {
        "public-health-fastmcp": {
            "url": f"http://{mcp_host}:{mcp_port}/sse",
            "transport": "sse",
        }
    }
    
    try:
        # Initialize the MCP client with config
        print("üöÄ Initializing MCP client with FastMCP server...")
        client = MultiServerMCPClient(client_config)
        
        print("‚úÖ Successfully connected to FastMCP server!")
        print()
        
        # Test 1: List available tools
        print("=== Test 1: Available Tools ===")
        tools = await client.get_tools()
        print(f"üìã Total tools available: {len(tools)}")
        for tool in tools:
            print(f"   üõ†Ô∏è  {tool.name}: {tool.description}")
        print()
        
        # Test 2: Get server information
        print("=== Test 2: Server Information ===")
        try:
            # Find the get_server_info tool and invoke it
            server_info_tool = next((t for t in tools if t.name == "get_server_info"), None)
            if server_info_tool:
                result = await server_info_tool.ainvoke({})
                server_info = parse_tool_result(result)
            else:
                raise Exception("get_server_info tool not found")
            
            print("üìä Server Information:")
            print(f"   Server: {server_info.get('server_name', 'Unknown')}")
            print(f"   Version: {server_info.get('version', 'Unknown')}")
            print(f"   Framework: {server_info.get('framework', 'Unknown')}")
            print(f"   Transport: {server_info.get('transport', 'Unknown')}")
            print(f"   Available Tools: {len(server_info.get('capabilities', {}).get('tools', []))}")
            print(f"   Total Mock Alerts: {server_info.get('statistics', {}).get('total_mock_alerts', 0)}")
            print(f"   Risk Trend Types: {server_info.get('statistics', {}).get('total_risk_trend_types', 0)}")
        except Exception as e:
            print(f"‚ùå Server info test failed: {str(e)}")
        print()
        
        # Test 3: Get public health alerts (default)
        print("=== Test 3: Public Health Alerts (Default) ===")
        try:
            alerts_tool = next((t for t in tools if t.name == "get_public_health_alerts"), None)
            if alerts_tool:
                result = await alerts_tool.ainvoke({})
                alerts_result = parse_tool_result(result)
            else:
                raise Exception("get_public_health_alerts tool not found")
            
            print("üì¢ Public Health Alerts:")
            print(f"   Total alerts: {alerts_result.get('total_alerts', 0)}")
            print(f"   Available alerts: {alerts_result.get('metadata', {}).get('total_available_alerts', 0)}")
            
            alerts = alerts_result.get('alerts', [])
            if alerts:
                print("   Recent alerts:")
                for alert in alerts[:3]:  # Show first 3
                    print(f"     üö® {alert['title']} ({alert['state']}, {alert['severity']})")
                    print(f"        Type: {alert['alert_type']}, Affected: {alert['affected_population']:,}")
        except Exception as e:
            print(f"‚ùå Public health alerts test failed: {str(e)}")
        print()
        
        # Test 4: Filtered alerts (High severity, specific states)
        print("=== Test 4: Filtered Alerts (HIGH severity, CA/NY) ===")
        try:
            alerts_tool = next((t for t in tools if t.name == "get_public_health_alerts"), None)
            if alerts_tool:
                result = await alerts_tool.ainvoke({
                    "states": ["CA", "NY"],
                    "severity": "HIGH",
                    "limit": 5
                })
                filtered_alerts = parse_tool_result(result)
            else:
                raise Exception("get_public_health_alerts tool not found")
            
            print("üîç Filtered Results:")
            print(f"   High severity alerts in CA/NY: {filtered_alerts.get('total_alerts', 0)}")
            print(f"   Filters applied: {filtered_alerts.get('filters_applied', {})}")
            
            for alert in filtered_alerts.get('alerts', []):
                print(f"     ‚ö†Ô∏è  {alert['title']} - {alert['state']} ({alert['severity']})")
        except Exception as e:
            print(f"‚ùå Filtered alerts test failed: {str(e)}")
        print()
        
        # Test 5: Health risk trends (all types)
        print("=== Test 5: Health Risk Trends (All Types) ===")
        try:
            trends_tool = next((t for t in tools if t.name == "get_health_risk_trends"), None)
            if trends_tool:
                result = await trends_tool.ainvoke({})
                trends_result = parse_tool_result(result)
            else:
                raise Exception("get_health_risk_trends tool not found")
            
            print("üìà Health Risk Trends:")
            trends = trends_result.get('trends', {})
            print(f"   Available trend types: {len(trends)}")
            
            for trend_type, trend_data in trends.items():
                data_points = trend_data.get('data_points', [])
                if data_points:
                    latest = data_points[-1]
                    print(f"     üìä {trend_data['name']}: {latest['value']} {trend_data['unit']} "
                          f"({latest['change_percent']:+.1f}%)")
        except Exception as e:
            print(f"‚ùå Health risk trends test failed: {str(e)}")
        print()
        
        # Test 6: Specific risk trends with date filtering
        print("=== Test 6: Specific Risk Trends (COVID & Mental Health) ===")
        try:
            trends_tool = next((t for t in tools if t.name == "get_health_risk_trends"), None)
            if trends_tool:
                result = await trends_tool.ainvoke({
                    "risk_types": ["covid_doctor_visits", "mental_health_calls"],
                    "start_date": "2024-01-01",
                    "end_date": "2024-02-12"
                })
                specific_trends = parse_tool_result(result)
            else:
                raise Exception("get_health_risk_trends tool not found")
            
            print("üéØ Specific Trends (Jan 2024):")
            for trend_type in ["covid_doctor_visits", "mental_health_calls"]:
                if trend_type in specific_trends.get('trends', {}):
                    trend = specific_trends['trends'][trend_type]
                    data_points = trend['data_points']
                    print(f"   üìà {trend['name']}:")
                    print(f"      Data points: {len(data_points)}")
                    print(f"      Unit: {trend['unit']}")
                    if data_points:
                        avg_value = sum(p['value'] for p in data_points) / len(data_points)
                        print(f"      Average: {avg_value:.1f} {trend['unit']}")
        except Exception as e:
            print(f"‚ùå Specific trends test failed: {str(e)}")
        print()
        
        # Test 7: Alert type filtering
        print("=== Test 7: Alert Type Filtering (OUTBREAK only) ===")
        try:
            alerts_tool = next((t for t in tools if t.name == "get_public_health_alerts"), None)
            if alerts_tool:
                result = await alerts_tool.ainvoke({
                    "alert_type": "OUTBREAK"
                })
                outbreak_alerts = parse_tool_result(result)
            else:
                raise Exception("get_public_health_alerts tool not found")
            
            print("ü¶† Outbreak Alerts Only:")
            print(f"   Outbreak alerts found: {outbreak_alerts.get('total_alerts', 0)}")
            
            for alert in outbreak_alerts.get('alerts', []):
                print(f"     üî• {alert['title']} - {alert['county']}, {alert['state']}")
                print(f"        Affected population: {alert['affected_population']:,}")
        except Exception as e:
            print(f"‚ùå Alert type filtering test failed: {str(e)}")
        print()
        
        # Test 8: Enhanced features (new risk types)
        print("=== Test 8: Enhanced Risk Types (Foodborne Illness) ===")
        try:
            trends_tool = next((t for t in tools if t.name == "get_health_risk_trends"), None)
            if trends_tool:
                result = await trends_tool.ainvoke({
                    "risk_types": ["foodborne_illness_reports"]
                })
                foodborne_trends = parse_tool_result(result)
            else:
                raise Exception("get_health_risk_trends tool not found")
            
            print("üçΩÔ∏è Foodborne Illness Trends:")
            if 'foodborne_illness_reports' in foodborne_trends.get('trends', {}):
                trend = foodborne_trends['trends']['foodborne_illness_reports']
                print(f"   Name: {trend['name']}")
                print(f"   Description: {trend['description']}")
                print(f"   Unit: {trend['unit']}")
                print(f"   Data points: {len(trend['data_points'])}")
                
                if trend['data_points']:
                    latest = trend['data_points'][-1]
                    print(f"   Latest value: {latest['value']} {trend['unit']} ({latest['change_percent']:+.1f}%)")
        except Exception as e:
            print(f"‚ùå Enhanced features test failed: {str(e)}")
        print()
        
        print("üéâ All LangChain MCP tests completed successfully!")
        print()
        print("üí° Key Benefits Demonstrated:")
        print("   ‚úÖ Seamless integration with LangChain/LangGraph")
        print("   ‚úÖ Type-safe tool calling with automatic validation")
        print("   ‚úÖ Comprehensive public health data access")
        print("   ‚úÖ Advanced filtering and date range queries")
        print("   ‚úÖ Enhanced FastMCP features (server info, new risk types)")
        print("   ‚úÖ Production-ready error handling")
        print("   ‚úÖ Ready for integration into LangGraph workflows")
        
    except Exception as e:
        print(f"‚ùå Test suite failed: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Clean up
        try:
            await client.close()
            print("\nüîå MCP client connection closed cleanly")
        except:
            pass

if __name__ == "__main__":
    print("Starting LangChain MCP adapter test...")
    print("This demonstrates real-world usage for LangGraph/LangChain applications\n")
    asyncio.run(test_fastmcp_with_langchain()) 